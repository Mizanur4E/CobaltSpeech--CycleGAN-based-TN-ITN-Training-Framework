# -*- coding: utf-8 -*-
"""Data Preprocessing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b79SdJW3-TfnKKE1He_5wDyuxPWkBgEK

Mount Drive
"""

import numpy as np
import pandas as pd
import re
import os
import gc

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv(r'/content/drive/My Drive/text normalization/data/en_train.csv')

"""## Text cleaning"""

X_nnrmlzd=df['before'].str.lower()   #lower casing all the data
X_nrmlzd=df['after'].str.lower()

#X_nnrmlzd= df['before'].replace(["i'm","he's","she's","it's","that's","what's","where's","how's","\'ll"],["i am","he is","she is","it is","that is","what is","where is","how is"," will"])
#replaces punctuation with space ''

X_nnrmlzd= X_nnrmlzd.astype(str)
X_nrmlzd= X_nrmlzd.astype(str)

def clean_text(text):
    '''Clean text by removing unnecessary characters and altering the format of words.'''


    text = re.sub(r"i'm", "i am", text)
    text = re.sub(r"he's", "he is", text)
    text = re.sub(r"she's", "she is", text)
    text = re.sub(r"it's", "it is", text)
    text = re.sub(r"that's", "that is", text)
    text = re.sub(r"what's", "that is", text)
    text = re.sub(r"where's", "where is", text)
    text = re.sub(r"how's", "how is", text)
    text = re.sub(r"\'ll", " will", text)
    text = re.sub(r"\'ve", " have", text)
    text = re.sub(r"\'re", " are", text)
    text = re.sub(r"\'d", " would", text)
    text = re.sub(r"\'re", " are", text)
    text = re.sub(r"won't", "will not", text)
    text = re.sub(r"can't", "cannot", text)
    text = re.sub(r"n't", " not", text)
    text = re.sub(r"n'", "ng", text)
    text = re.sub(r"'bout", "about", text)
    text = re.sub(r"'til", "until", text)
    text = re.sub(r"[-()\"#/@;:<>{}`+=~|.!?,]", " ", text)
    
    return text

for i in range(len(X_nnrmlzd)):
  X_nnrmlzd[i]= clean_text(X_nnrmlzd[i])
  X_nrmlzd[i] = clean_text(X_nrmlzd[i])

"""## Windowing"""

#generate sequences. we can select number of neighbour words using this method
def windowing(dat, pad_size):


  

    #bos= "<bos>"
    #eos= "<eos>"
    new_data=np.empty(len(dat),dtype='object')
    size= 2*pad_size+1
  
    for i in np.arange(pad_size,(len(dat)-pad_size)):
      pa=''
      
      for m in np.arange(i-pad_size,i+pad_size+1):
        pa=pa+str(dat[m])+' '
      new_data[i]=pa
    
    n_data=new_data
    #[pad_size:(len(dat)-pad_size)]
    
    return n_data

a=['jan','feb','mar','aprol','may']
print(windowing(a,1))

pad_size = 1 
X_nnrmlzd =X_nnrmlzd.to_numpy()
X_nrmlzd = X_nrmlzd.to_numpy()

X_1= windowing(X_nnrmlzd,0)
X_C =windowing(X_nnrmlzd,pad_size)
X_2 = windowing(X_nrmlzd,0)

print(X_1[90:99])

"""## Finding different classes,their counts and corresponding indices and storing as csv"""

dfc = df["class"]
len = dfc.shape[0]
class_counts = dict();  #a dictionary for storing different class counts
print(len)
classes =[]  #stores class name separately

date = []
letters =[]
cardinal =[]
verbatim =[]
decimal =[]
measure = []
money =[]
ordinal = []
time = []
electronic = []
digit = []
fraction =[]
telephone =[]
address= []

for i in range(len):  
  if dfc[i] not in classes:   #if new class add it to dictionary
    classes.append(dfc[i])
    class_counts[dfc[i]]=1    #add counts 1 as first recognized this class
  else:class_counts[dfc[i]]= class_counts[dfc[i]]+1  #if the class is previously detected then increase the count

  if dfc[i] == 'DATE' : date.append(i)
  elif dfc[i] == 'LETTERS' : letters.append(i)
  elif dfc[i] ==  'CARDINAL' : cardinal.append(i)
  elif dfc[i] == 'VERBATIM': verbatim.append(i)
  elif dfc[i] =='DECIMAL' : decimal.append(i)
  elif dfc[i] == 'MEASURE': measure.append(i)
  elif dfc[i] == 'MONEY' : money.append(i)
  elif dfc[i] == 'ORDINAL' : ordinal.append(i)
  elif dfc[i] ==  'TIME' : time.append(i)
  elif dfc[i] == 'ELECTRONIC': electronic.append(i)
  elif dfc[i] ==  'DIGIT' : digit.append(i)
  elif dfc[i] == 'FRACTION':fraction.append(i)
  elif dfc[i] ==  'TELEPHONE' :telephone.append(i)
  elif dfc[i] == 'ADDRESS':address.append(i)


print(classes)
print(class_counts)

#text form without context
X_date = X_1[date]
X_letters =X_1[letters]
X_cardinal =X_1[cardinal]
X_verbatim =X_1[verbatim]
X_decimal =X_1[decimal]
X_measure =X_1[measure]
X_money = X_1[money]
X_ordinal =X_1[ordinal]
X_time = X_1[time]
X_electronic = X_1[electronic]
X_digit =X_1[digit]
X_fraction =X_1[fraction]
X_telephone =X_1[telephone]
X_address= X_1[address]

#text form with context
X_date_C = X_C[date]
X_letters_C  =X_C[letters]
X_cardinal_C  =X_C[cardinal]
X_verbatim_C  =X_C[verbatim]
X_decimal_C  =X_C[decimal]
X_measure_C  =X_C[measure]
X_money_C  = X_C[money]
X_ordinal_C  =X_C[ordinal]
X_time_C  = X_C[time]
X_electronic_C  = X_C[electronic]
X_digit_C  =X_C[digit]
X_fraction_C  =X_C[fraction]
X_telephone_C  =X_C[telephone]
X_address_C = X_C[address]


#speech form without context. 
y_date = X_2[date]
y_letters =X_2[letters]
y_cardinal =X_2[cardinal]
y_verbatim =X_2[verbatim]
y_decimal =X_2[decimal]
y_measure =X_2[measure]
y_money = X_2[money]
y_ordinal =X_2[ordinal]
y_time = X_2[time]
y_electronic = X_2[electronic]
y_digit =X_2[digit]
y_fraction =X_2[fraction]
y_telephone =X_2[telephone]
y_address= X_2[address]



#create pandas dataframe 
classwise_data= pd.DataFrame()
classwise_data['X_date_c'] = pd.Series(X_date_C)
classwise_data['X_letters_c'] = pd.Series(X_letters_C)
classwise_data['X_cardinal_c'] = pd.Series(X_cardinal_C)
classwise_data['X_verbatim_c']= pd.Series(X_verbatim_C)
classwise_data['X_decimal_c'] = pd.Series(X_decimal_C)
classwise_data['X_measure_c'] = pd.Series(X_measure_C)
classwise_data['X_money_c'] = pd.Series(X_money_C)
classwise_data['X_ordinal_c'] = pd.Series(X_ordinal_C)
classwise_data['X_time_c'] =pd.Series(X_time_C)
classwise_data['X_electronic_c'] = pd.Series(X_electronic_C)
classwise_data['X_digit_c'] =pd.Series(X_digit_C)
classwise_data['X_fraction_c'] = pd.Series(X_fraction_C)
classwise_data['X_telephone_c'] =pd.Series( X_telephone_C)
classwise_data['X_address_c'] =pd.Series(X_address_C)
classwise_data['X_date'] = pd.Series(X_date)
classwise_data['X_letters'] = pd.Series(X_letters)
classwise_data['X_cardinal'] = pd.Series(X_cardinal)
classwise_data['X_verbatim']= pd.Series(X_verbatim)
classwise_data['X_decimal'] = pd.Series(X_decimal)
classwise_data['X_measure'] = pd.Series(X_measure)
classwise_data['X_money'] = pd.Series(X_money)
classwise_data['X_ordinal'] = pd.Series(X_ordinal)
classwise_data['X_time'] =pd.Series(X_time)
classwise_data['X_electronic'] = pd.Series(X_electronic)
classwise_data['X_digit'] =pd.Series(X_digit)
classwise_data['X_fraction'] = pd.Series(X_fraction)
classwise_data['X_telephone'] =pd.Series( X_telephone)
classwise_data['X_address'] =pd.Series(X_address)
classwise_data['y_date'] = pd.Series(y_date)
classwise_data['y_letters'] = pd.Series(y_letters)
classwise_data['y_cardinal'] = pd.Series(y_cardinal)
classwise_data['y_verbatim']= pd.Series(y_verbatim)
classwise_data['y_decimal'] = pd.Series(y_decimal)
classwise_data['y_measure'] = pd.Series(y_measure)
classwise_data['y_money'] = pd.Series(y_money)
classwise_data['y_ordinal'] = pd.Series(y_ordinal)
classwise_data['y_time'] =pd.Series(y_time)
classwise_data['y_electronic'] = pd.Series(y_electronic)
classwise_data['y_digit'] =pd.Series(y_digit)
classwise_data['y_fraction'] = pd.Series(y_fraction)
classwise_data['y_telephone'] =pd.Series( y_telephone)
classwise_data['y_address'] =pd.Series(y_address)


#converts dataframe to csv for future use


classwise_data.to_csv('/content/drive/My Drive/classwise output input v3.csv',index=False)



print(X_cardinal_C[1:10])
print(y_telephone[1:10])
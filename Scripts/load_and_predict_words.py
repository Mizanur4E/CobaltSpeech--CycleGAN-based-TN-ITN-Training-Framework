# -*- coding: utf-8 -*-
"""load and predict words

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10kDbjwvtt5hGyyN1X_6V_cYfXqwo43Lc

## import necessary packages
"""

import tensorflow as tf
from tensorflow import keras
import numpy 
import pandas as pd
from numpy.random import randint
from sklearn.model_selection import train_test_split
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
from nltk.translate.bleu_score import sentence_bleu
from nltk.translate.bleu_score import SmoothingFunction
from tensorflow.keras.preprocessing.text import tokenizer_from_json

classwise_data = pd.read_csv(r'classwiseoutputinputv2.csv')


(X_date)=classwise_data['X_date']
(X_letters)=classwise_data['X_letters'] [:152795]
(X_cardinal)=classwise_data['X_cardinal'] [:133744]
(X_verbatim)= classwise_data['X_verbatim'][:78108]
(X_decimal)= classwise_data['X_decimal'][:9821]
(X_measure)=classwise_data['X_measure'][:14783]
(X_money)=classwise_data['X_money'][:6128]
(X_ordinal)=classwise_data['X_ordinal'] [:12703]
(X_time)=classwise_data['X_time'] [:1465]
(X_electronic)=classwise_data['X_electronic'] [:5162]
(X_digit)=classwise_data['X_digit'] [:5442]
(X_fraction)=classwise_data['X_fraction'] [:1196]
( X_telephone)=classwise_data['X_telephone'][:4024]
(X_address)=classwise_data['X_address'] [:522]

(y_date)=classwise_data['y_date'] 
(y_letters)=classwise_data['y_letters'] [:152795]
(y_cardinal)=classwise_data['y_cardinal']  [:133744]
(y_verbatim)=classwise_data['y_verbatim'][:78108]
(y_decimal)=classwise_data['y_decimal'][:9821]
(y_measure)=classwise_data['y_measure'][:14783]
(y_money)=classwise_data['y_money'] [:6128]
(y_ordinal)=classwise_data['y_ordinal']  [:12703]
(y_time)=classwise_data['y_time'] [:1465]
(y_electronic)=classwise_data['y_electronic']  [:5162]
(y_digit)=classwise_data['y_digit']  [:5442]
(y_fraction)=classwise_data['y_fraction'][:1196]
(y_telephone)=classwise_data['y_telephone'] [:4024]
(y_address)=classwise_data['y_address'] [:522]

#split dataset and find validation dataset
X_train_date, X_test_date, y_train_date, y_test_date = train_test_split(X_date, y_date, test_size=0.015, random_state=42)
X_train_letters, X_test_letters, y_train_letters, y_test_letters = train_test_split(X_letters, y_letters, test_size=0.015, random_state=42)
X_train_cardinal, X_test_cardinal, y_train_cardinal, y_test_cardinal = train_test_split(X_cardinal, y_cardinal, test_size=0.015, random_state=42)
X_train_verbatim, X_test_verbatim, y_train_verbatim, y_test_verbatim = train_test_split(X_verbatim, y_verbatim, test_size=0.015, random_state=42)
X_train_decimal, X_test_decimal, y_train_decimal, y_test_decimal = train_test_split(X_decimal, y_decimal, test_size=0.015, random_state=42)
X_train_measure, X_test_measure, y_train_measure, y_test_measure = train_test_split(X_measure, y_measure, test_size=0.015, random_state=42)
X_train_money, X_test_money, y_train_money, y_test_money = train_test_split(X_money, y_money, test_size=0.015, random_state=42)
X_train_ordinal, X_test_ordinal, y_train_ordinal, y_test_ordinal = train_test_split(X_ordinal, y_ordinal, test_size=0.015, random_state=42)
X_train_time, X_test_time, y_train_time, y_test_time = train_test_split(X_time, y_time, test_size=0.015, random_state=42)
X_train_electronic, X_test_electronic, y_train_electronic, y_test_electronic = train_test_split(X_electronic, y_electronic, test_size=0.015, random_state=42)
X_train_digit, X_test_digit, y_train_digit, y_test_digit = train_test_split(X_digit, y_digit, test_size=0.015, random_state=42)
X_train_fraction, X_test_fraction, y_train_fraction, y_test_fraction = train_test_split(X_fraction, y_fraction, test_size=0.015, random_state=42)
X_train_telephone, X_test_telephone, y_train_telephone, y_test_telephone = train_test_split(X_telephone, y_telephone, test_size=0.015, random_state=42)
X_train_address, X_test_address, y_train_address, y_test_address = train_test_split(X_address, y_address, test_size=0.015, random_state=42)

with open('tokenizer1.txt') as f:
  lines1= f.read()

with open('tokenizer2.txt') as f:
  lines2= f.read()

tokenizer1 = tokenizer_from_json(lines1)
tokenizer2 = tokenizer_from_json(lines2)

maxlen1 = 6
maxlen2 = 9  
gen = tf.keras.models.load_model('modelXY')

def average_bleu(refa, hypa):
  smoothie = SmoothingFunction().method2
  n= len(refa)
  net =0
  for i in range(n):
    
    a= sentence_bleu([refa[i]],hypa[i], smoothing_function=smoothie)
    net= net + a
  me = net/n
  return me

def accuracy_printer(X,y_true):
  inp= tokenizer1.texts_to_sequences(X)
  inp =pad_sequences(inp, padding='post', maxlen=maxlen1)
  out = gen.predict(inp)
  out = numpy.argmax(out,axis=-1)
  text_out= tokenizer2.sequences_to_texts(out)
  ground_truth = y_true.to_numpy()
  text_out= numpy.asarray(text_out)
  #print(ground_truth)
  #print('\n')
  #print(text_out)
  ground_truth_seq = tokenizer2.texts_to_sequences(ground_truth)
  ground_truth_seq =pad_sequences(ground_truth_seq, padding='post', maxlen=maxlen2)
  cal = tf.keras.metrics.Accuracy()
  cal.update_state(out,ground_truth_seq)
  print('WER is:' ,cal.result().numpy())
  print('\n')
  smoothie = SmoothingFunction().method4
  score = average_bleu(ground_truth,text_out)
  print('Average BLEU score is: ',score)

print('For Class: Date')
accuracy_printer(X_test_date,y_test_date)
print('For Class: Letters')
accuracy_printer(X_test_letters,y_test_letters)
print('For Class: Cardinal')
accuracy_printer(X_test_cardinal,y_test_cardinal)
print('For Class: Verbatim')
accuracy_printer(X_test_verbatim,y_test_verbatim)
print('For Class: Decimal')
accuracy_printer(X_test_decimal,y_test_decimal)
print('For Class: Measure')
accuracy_printer(X_test_measure,y_test_measure)
print('For Class: Money')
accuracy_printer(X_test_money,y_test_money)
print('For Class: Ordinal')
accuracy_printer(X_test_ordinal,y_test_ordinal)
print('For Class: Time')
accuracy_printer(X_test_time,y_test_time)
print('For Class: Electronic')
accuracy_printer(X_test_electronic,y_test_electronic)
print('For Class: Digit')
accuracy_printer(X_test_digit,y_test_digit)
print('For Class: Fraction')
accuracy_printer(X_test_fraction,y_test_fraction)
print('For Class: Telephone')
accuracy_printer(X_test_telephone,y_test_telephone)
print('For Class: Address')
accuracy_printer(X_test_address,y_test_address)